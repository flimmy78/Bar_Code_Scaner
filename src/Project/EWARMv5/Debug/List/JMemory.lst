###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.2.51295/W32 for ARM     06/Jan/2014  10:04:34 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\work\T6\FW\src\App\JMemory.c                          #
#    Command line =  D:\work\T6\FW\src\App\JMemory.c -lcN                     #
#                    D:\work\T6\FW\src\Project\EWARMv5\Debug\List\ -o         #
#                    D:\work\T6\FW\src\Project\EWARMv5\Debug\Obj\ --no_cse    #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.4\arm\INC\DLib_Config_Full.h" -I                       #
#                    D:\work\T6\FW\src\Project\EWARMv5\..\ -I                 #
#                    D:\work\T6\FW\src\Project\EWARMv5\..\..\App\ -I          #
#                    D:\work\T6\FW\src\Project\EWARMv5\..\..\Drivers\ -I      #
#                    D:\work\T6\FW\src\Project\EWARMv5\..\..\FatFs\ -I        #
#                    D:\work\T6\FW\src\Project\EWARMv5\..\..\Lib\inc\ -I      #
#                    D:\work\T6\FW\src\Project\EWARMv5\..\..\uCOS\uC-CPU\ -I  #
#                    D:\work\T6\FW\src\Project\EWARMv5\..\..\uCOS\uC-LIB\ -I  #
#                    D:\work\T6\FW\src\Project\EWARMv5\..\..\uCOS\uCOS-II\Por #
#                    ts\ -I D:\work\T6\FW\src\Project\EWARMv5\..\..\uCOS\uCOS #
#                    -II\Source\ -I D:\work\T6\FW\src\Project\EWARMv5\..\..\u #
#                    COS\uC-Probe\ -I D:\work\T6\FW\src\Project\EWARMv5\..\.. #
#                    \usb_lib\ -I "C:\Program Files\IAR Systems\Embedded      #
#                    Workbench 5.4\arm\INC\" -Ol                              #
#    List file    =  D:\work\T6\FW\src\Project\EWARMv5\Debug\List\JMemory.lst #
#    Object file  =  D:\work\T6\FW\src\Project\EWARMv5\Debug\Obj\JMemory.o    #
#                                                                             #
#                                                                             #
###############################################################################

D:\work\T6\FW\src\App\JMemory.c
      1          /**
      2          * @file JMemory.c
      3          * @brief 管理动态申请内存的模块
      4          *
      5          * @version V0.0.1
      6          * @author joe
      7          * @date 2012年3月27日
      8          * @note
      9          *		none
     10          *
     11          * @copy
     12          *
     13          * 此代码为深圳江波龙电子有限公司项目代码，任何人及公司未经许可不得复制传播，或用于
     14          * 本公司以外的项目。本司保留一切追究权利。
     15          *
     16          * <h1><center>&copy; COPYRIGHT 2012 netcom</center></h1>
     17          */
     18          
     19          #include "JMemory.h"
     20          #include <stdlib.h>
     21          #define ALLOCATE_ADDR_TABLE_SIZE  200
     22          
     23          static int  p_allocate_addr[ALLOCATE_ADDR_TABLE_SIZE];		//每次动态申请的地址都会保存在此数组里面
     24          
     25          void JMemory_init(void)
     26          {
     27          	memset((void*)p_allocate_addr,0,ALLOCATE_ADDR_TABLE_SIZE*sizeof(int));
     28          }
     29          
     30          void * Jmalloc(int size)
     31          {
     32          	void *p;
     33          	int		i;
     34          
     35          	p = malloc(size);
     36          	if(p)
     37          	{
     38          		for(i = 0;i < ALLOCATE_ADDR_TABLE_SIZE;i++)
     39          		{
     40          			if(p_allocate_addr[i] == 0)
     41          			{
     42          				p_allocate_addr[i] = (int)p;
     43          				break;
     44          			}
     45          		}
     46          
     47          		if(i == ALLOCATE_ADDR_TABLE_SIZE)
     48          		{
     49          			p_allocate_addr[0] = (int)p;
     50          		}
     51          	}
     52          
     53          	return p;
     54          }
     55          
     56          
     57          void Jfree(void * p)
     58          {
     59          	int	i;
     60          	for(i = 0;i < ALLOCATE_ADDR_TABLE_SIZE;i++)
     61          	{
     62          		if((int)p == p_allocate_addr[i])
     63          		{
     64          			free(p);
     65          			p_allocate_addr[i] = 0;
     66          			break;
     67          		}
     68          	}
     69          }
     70          
     71          
     72          void Jfree_all(void)
     73          {
     74          	int	i;
     75          	for(i = 0;i < ALLOCATE_ADDR_TABLE_SIZE;i++)
     76          	{
     77          		if(p_allocate_addr[i])
     78          		{
     79          			free((void*)p_allocate_addr[i]);
     80          		}
     81          	}
     82          }

   Maximum stack usage in bytes:

     Function     .cstack
     --------     -------
     JMemory_init      8
     Jfree             8
     Jfree_all         8
     Jmalloc           8


   Section sizes:

     Function/Label  Bytes
     --------------  -----
     p_allocate_addr  800
     JMemory_init      16
     Jmalloc           48
     Jfree             38
     Jfree_all         34
     ??DataTable7       4

 
 800 bytes in section .bss
 140 bytes in section .text
 
 140 bytes of CODE memory
 800 bytes of DATA memory

Errors: none
Warnings: 1
